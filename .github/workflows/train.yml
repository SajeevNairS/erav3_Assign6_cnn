name: Model Architecture Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision
        
    - name: Check Parameter Count
      run: |
        echo "Checking total parameter count..."
        python -c "
        from model import create_model
        
        model = create_model()
        total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
        print(f'Total trainable parameters: {total_params:,}')
        assert total_params < 20000, f'Model has {total_params:,} parameters, exceeding limit of 20,000'
        "
        
    - name: Check Architecture Requirements
      run: |
        echo "Checking model architecture requirements..."
        python -c "
        from model import create_model
        import torch.nn as nn
        
        model = create_model()
        
        # Check for Batch Normalization
        has_bn = any(isinstance(m, nn.BatchNorm2d) for m in model.modules())
        assert has_bn, 'Model must use Batch Normalization'
        print('✓ Model uses Batch Normalization')
        
        # Check for Dropout
        has_dropout = any(isinstance(m, nn.Dropout) for m in model.modules())
        assert has_dropout, 'Model must use Dropout'
        print('✓ Model uses Dropout')
        
        # Check for GAP
        has_gap = any(isinstance(m, nn.AdaptiveAvgPool2d) for m in model.modules())
        assert has_gap, 'Model must use Global Average Pooling (AdaptiveAvgPool2d)'
        print('✓ Model uses Global Average Pooling')
        
        # Verify FC layer sizes (if any)
        fc_layers = [m for m in model.modules() if isinstance(m, nn.Linear)]
        for fc in fc_layers:
            assert fc.in_features <= 128, f'FC layer input {fc.in_features} too large. Should use GAP'
        print('✓ Architecture requirements satisfied')
        "
        
    - name: Check Forward Pass
      run: |
        echo "Verifying forward pass..."
        python -c "
        from model import create_model
        import torch
        
        model = create_model()
        batch = torch.randn(1, 1, 28, 28)
        output = model(batch)
        
        assert output.shape == (1, 10), f'Expected output shape (1, 10), got {output.shape}'
        print('✓ Forward pass successful with correct output shape')
        "
        
    - name: Summary
      run: |
        echo "=== Architecture Verification Summary ==="
        echo "✓ Parameter count under 20,000"
        echo "✓ Uses Batch Normalization"
        echo "✓ Uses Dropout"
        echo "✓ Uses Global Average Pooling"
        echo "✓ Forward pass verified"
        echo "All checks passed successfully!" 