name: Validate Model Architecture

on: [push]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision
    
    - name: Validate Model Architecture
      run: |
        echo "Validating model architecture..."
        python3 -c "
        from assign6 import create_model
        import torch.nn as nn
        
        # Create model
        model = create_model()
        
        # Check parameter count
        total_params = sum(p.numel() for p in model.parameters())
        print(f'Total parameters: {total_params}')
        assert total_params < 20000, f'Model has {total_params:,} parameters, exceeding limit of 20,000'
        
        # Check for Batch Normalization
        has_bn = any(isinstance(m, nn.BatchNorm2d) for m in model.modules())
        assert has_bn, 'Model must use Batch Normalization'
        
        # Check for Dropout
        has_dropout = any(isinstance(m, nn.Dropout) for m in model.modules())
        assert has_dropout, 'Model must use Dropout'
        
        # Check for GAP or small FC layers
        has_gap = any(isinstance(m, nn.AdaptiveAvgPool2d) for m in model.modules())
        fc_layers = [m for m in model.modules() if isinstance(m, nn.Linear)]
        
        if not has_gap:
            # If no GAP, ensure FC layers are reasonable size
            for fc in fc_layers:
                assert fc.in_features <= 128, f'FC layer input {fc.in_features} too large. Should use GAP or smaller FC layers'
        
        print('✓ Parameter count:', total_params)
        print('✓ Uses Batch Normalization')
        print('✓ Uses Dropout')
        print('✓ Architecture requirements satisfied')
        " 